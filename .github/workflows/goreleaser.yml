name: goreleaser

on:
  push:
    tags:
      - '*'
  workflow_dispatch: {}

permissions:
  contents: write
  packages: write
  id-token: write
  attestations: write



jobs:
  goreleaser:
    runs-on: ubuntu-latest
    environment:
      name: build
    env:
      DOCKER_CLI_EXPERIMENTAL: "enabled"
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      -
        name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: ghcr-login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          version: '~> v2'
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - 
        name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: "us-east-1"
          role-to-assume: ${{ secrets.AWS_INSPECTOR_ROLE_ARN }}
      - name: Inspector Scan (repository)
        id: inspector-repository
        uses: aws-actions/vulnerability-scan-github-action-for-amazon-inspector@v1
        with:
          # change artifact_type to either 'repository', 'container', 'binary', or 'archive'.
          artifact_type: 'repository'
  
          # change artifact_path to the file path or container image you would like to scan.
          # File paths should be relative to your root project directory.
          # For containers, this action accepts 'docker pull'-style references to containers,
          # such as 'alpine:latest' or a file path to an image exported as TAR using docker save.
          artifact_path: './'
  
          # If enabled, this setting will display Inspector's vulnerability scan findings
          # as a GitHub actions step summary. See here for an example step summary:
          # https://github.com/aws-actions/vulnerability-scan-github-action-for-amazon-inspector/actions/runs/8800085041
          display_vulnerability_findings: "enabled"
  
          # Set vulnerability thresholds; if the number of vulnerabilities is
          # equal to or greater than any of the specified thresholds, this
          # action will set the 'vulnerability_threshold_exceeded'
          # output flag to 1.
          critical_threshold: 1
          high_threshold: 1
          medium_threshold: 1
          low_threshold: 1
          other_threshold: 1

      - 
        name: Inspector Scan (container)
        id: inspector-container
        uses: aws-actions/vulnerability-scan-github-action-for-amazon-inspector@v1
        with:
          # change artifact_type to either 'repository', 'container', 'binary', or 'archive'.
          artifact_type: 'container'
  
          # change artifact_path to the file path or container image you would like to scan.
          # File paths should be relative to your root project directory.
          # For containers, this action accepts 'docker pull'-style references to containers,
          # such as 'alpine:latest' or a file path to an image exported as TAR using docker save.
          artifact_path: ghcr.io/${{ github.repository }}
  
          # If enabled, this setting will display Inspector's vulnerability scan findings
          # as a GitHub actions step summary. See here for an example step summary:
          # https://github.com/aws-actions/vulnerability-scan-github-action-for-amazon-inspector/actions/runs/8800085041
          display_vulnerability_findings: "enabled"
  
          # Set vulnerability thresholds; if the number of vulnerabilities is
          # equal to or greater than any of the specified thresholds, this
          # action will set the 'vulnerability_threshold_exceeded'
          # output flag to 1.
          critical_threshold: 1
          high_threshold: 1
          medium_threshold: 1
          low_threshold: 1
          other_threshold: 1  
      - 
        name: Attest SBOM (repository)
        uses: actions/attest-sbom@v1
        with:
          subject-path:  |
            dist/*.apk
            dist/*.deb
            dist/*.rpm
            dist/*.tar.gz
            dist/*.zip
          sbom-path: ${{steps.inspector-repository.outputs.artifact_sbom}}
      - 
        name: Attest SBOM (container)
        uses: actions/attest-sbom@v1
        with:
          subject-path: ghcr.io/${{ github.repository }}
          subject-digest: |
            ${{ steps.inspector-container.outputs.artifact_digest }}
          sbom-path: ${{steps.inspector-container.outputs.artifact_sbom}}
          push-to-registry: true

      - 
        name: Attest package provenance
        uses: actions/attest-build-provenance@v1
        with: 
          subject-path: |
            dist/*.apk
            dist/*.deb
            dist/*.rpm
            dist/*.tar.gz
            dist/*.zip
      -
        name: Attest container provenance
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: ghcr.io/${{ github.repository }}
          push-to-registry: true
